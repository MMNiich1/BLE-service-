
import Foundation
import CoreBluetooth
import UIKit

/* Services & Characteristics UUIDs */



let btServiceSharedInstance = BTService();

class BTService: NSObject, CBPeripheralDelegate {
 
    var peripheral: CBPeripheral?
    let BLEServiceUUID = CBUUID(string: "FFE1")
    let BLEServiceChangedStatusNotification = "isConnected"

    var Characteristics: CBCharacteristic!
  
    override init() {}
    
    init(initWithPeripheral peripheral: CBPeripheral) {
        super.init()
        btDiscoverySharedInstance
        self.peripheral = peripheral
       
    }
    
    
    deinit {
        self.reset()
    }
    
    
    func startDiscoveringServices() {
         self.peripheral!.discoverServices(nil)
        print("here it is:\(peripheral)")
        print("discovering Services 123")
        func writeValue(data: NSString){
            let data = ("R").dataUsingEncoding(NSUTF8StringEncoding)
            if let peripheral = peripheral{
                if let deviceCharacteristics = Characteristics{
                    peripheral.writeValue(data!, forCharacteristic: deviceCharacteristics, type: CBCharacteristicWriteType.WithoutResponse)}}}
        self.sendBTServiceNotificationWithIsBluetoothConnected(false)
    }
    
    func reset() {
       
        self.sendBTServiceNotificationWithIsBluetoothConnected(false)
        
    }
    func peripheral(peripheral: CBPeripheral!, didDiscoverServices error: NSError?) {
        
        if let peripheral = peripheral{
            // Iterate through the services of a particular peripheral.
            for service in peripheral.services! {
                let thisService = service as? CBService
                // Let's see what characteristics this service has.
                if let thisService = thisService{
                    peripheral.discoverCharacteristics(nil, forService: thisService)
                    print("123 services\(peripheral.services)")
                    
                }
            }
        }
    }
    
    



    // Mark: - CBPeripheralDelegate
    

    
    // Mark: - Private
    
    
    
    func sendBTServiceNotificationWithIsBluetoothConnected(isBluetoothConnected: Bool) {
        let connectionDetails = ["connecting": isBluetoothConnected]
        NSNotificationCenter.defaultCenter().postNotificationName(BLEServiceChangedStatusNotification, object: self, userInfo: connectionDetails)
         print("I should be changing the status")
    }
    
    func peripheral(peripheral: CBPeripheral, didWriteValueForCharacteristic characteristic: CBCharacteristic, error: NSError?) {
        if error != nil {
            print("didWriteValueForCharacteristic error: \(error!.localizedDescription)")
        }
    }
    
    func writeValue(data: NSString){
        let data = (data as NSString).dataUsingEncoding(NSUTF8StringEncoding)
        if let peripheral = peripheral{
            if let deviceCharacteristics = Characteristics{
                peripheral.writeValue(data!, forCharacteristic: deviceCharacteristics, type: CBCharacteristicWriteType.WithoutResponse)
            }
        }
        
    }

    
}



